import coworkers = require('coworkers');
import token from './token';

import DynamicLoader from '../src/dynamicLoader';
import {
  IProcessorFnFactory, IProcessorFnFactoryInstance, IProcessorFnMaker, IService,
  ProcessorFn
} from "../src/types";

class App extends coworkers {
  private static dynamicLoader: DynamicLoader;
  public loadedServiceProcessor: ProcessorFn;
  public loadedServiceProcessorMaker: IProcessorFnMaker;
  public loadedServiceProcessorFactory: IProcessorFnFactory;

  constructor(){
    super();

    (async () => {
      App.dynamicLoader =
        new DynamicLoader(await DynamicLoader.loadJson('./config/services.json'));
    })();
  }

  public attachService(srvOpts) {
    super.queue(srvOpts.amqp.reqQueue, function * () {

      this.ack = true; // acknowledge message later, see `Context` documentation below



      (async () => {
        if (srvOpts.serviceName === 'function.service') {
          this.loadedServiceProcessor =
            await App.getServiceWithFn(await App.dynamicLoader.loadService(srvOpts.serviceName));
        } else if (srvOpts.serviceName === 'maker.service') {
          this.loadedServiceProcessorMaker =
            await App.getServiceWithFnMaker(await App.dynamicLoader.loadService(srvOpts.serviceName));
        } else if (srvOpts.serviceName === 'factory.service') {
          this.loadedServiceProcessorFactory =
            await App.getServiceWithFnFactory(await App.dynamicLoader.loadService(srvOpts.serviceName));
        } else {
          console.log(`Service "${srvOpts.serviceName}" not found`);
        }
      })().catch(err => {
        console.log(`Error: ${err}`);
      });
    });
  }

  private static async getServiceWithFn(serviceWithFn: IService) {
    let processorFn = serviceWithFn.processor as ProcessorFn;

    console.log(await processorFn({example: 'ProcessorFn'}));

    return processorFn;
  }

  private static async getServiceWithFnMaker(serviceWithFnMaker: IService) {
    let maker = serviceWithFnMaker.processor as IProcessorFnMaker;

    let processorFn = maker({comment: "more serviceWithFnMaker config options"}) as ProcessorFn;
    console.log(await processorFn({example: "ProcessorFn generated by ProcessorFnMaker"}));

    return maker;
  }

  private static async getServiceWithFnFactory(serviceWithFnFactory: IService) {
      let FnFactory = serviceWithFnFactory.processor as IProcessorFnFactory;

      let factory: IProcessorFnFactoryInstance = new FnFactory(
        {comment: "more serviceWithFnFactory config options"},
        {comment: "serviceWithFnFactory resources"},
      );
      console.log(await factory
        .processor({example: "1st ProcessorFn generated by ProcessorFnFactory"}));
      console.log(await factory
        .processor({example: "2nd ProcessorFn generated by ProcessorFnFactory"}));

      return FnFactory;
  }
}

let app = new App();

app.attachService({
  amqp : {reqQueue: 'processorFnQueue'},
  serviceName: 'function.service'
});

app.attachService({
  amqp: {reqQueue: 'processorFnMakerQueue'},
  serviceName: 'maker.service'
});

app.attachService({
  amqp: {reqQueue: 'processorFnFactoryQueue'},
  serviceName: 'factory.service'
});

// middleware error handler
app.on('error', function (err) {
  console.error(err.stack)
});

// connect to rabbitmq and begin consuming
app.connect('amqp://pljusctb:' + token + '@black-boar.rmq.cloudamqp.com/pljusctb');
