import coworkers = require('coworkers');
import token from './token';

import DynamicLoader from '../src/dynamicLoader';
import {
  IProcessorFnFactory, IProcessorFnFactoryInstance, IProcessorFnMaker, IService,
  ProcessorFn
} from "../src/types";

class App extends coworkers {
  private static dynamicLoader: DynamicLoader;

  constructor(){
    super();

    DynamicLoader.loadJson('./config/services.json').then(conf => {
      App.dynamicLoader = new DynamicLoader(conf);
    })
  }

  attachService(srvOpts) {
    super.queue(srvOpts.amqp.reqQueue, function * () {

      this.ack = true; // acknowledge message later, see `Context` documentation below

      let processorFn: ProcessorFn;

      App.dynamicLoader.loadService('function.service').then((serviceWithFn: IService) => {
        processorFn = serviceWithFn.processor as ProcessorFn;
        console.log(`** processorType: ${serviceWithFn.processorType}`);
        processorFn({example: 'ProcessorFn'}).then(res => {
          console.log(res);
        })
      });

      App.dynamicLoader.loadService('maker.service').then(serviceWithFnMaker => {
        let maker = serviceWithFnMaker.processor as IProcessorFnMaker;
        processorFn = maker({comment: "more serviceWithFnMaker config options"}) as ProcessorFn;
        console.log(`** processorType: ${serviceWithFnMaker.processorType}`);
        processorFn({example: "ProcessorFn generated by ProcessorFnMaker"}).then(res => {
          console.log(res);
        })
      });

      App.dynamicLoader.loadService('factory.service').then(serviceWithFnFactory => {
        let FnFactory = serviceWithFnFactory.processor as IProcessorFnFactory;
        let factory: IProcessorFnFactoryInstance = new FnFactory(
          {comment: "more serviceWithFnFactory config options"},
          {comment: "serviceWithFnFactory resources"},
        );
        console.log(`** processorType: ${serviceWithFnFactory.processorType}`);
        factory.processor({example: "1st ProcessorFn generated by ProcessorFnFactory"}).then(res => {
          console.log(res);
          factory.processor({example: "2nd ProcessorFn generated by ProcessorFnFactory"}).then(res => {
            console.log(res);
          })
        });
      });
    });
  }
}

let app = new App();

app.attachService({
  amqp : {reqQueue: 'someQueue'}
});

// middleware error handler
app.on('error', function (err) {
  console.error(err.stack)
});

// connect to rabbitmq and begin consuming
app.connect('amqp://pljusctb:' + token + '@black-boar.rmq.cloudamqp.com/pljusctb');
